-*- restructuredtext -*-

################
SOFTWARE ROADMAP
################

The network daemon server and the flow scripts know how to execute flows.
What we need are functions and classes implementing series of flows, so that
the server and flow commandline tools can take a configuration for which ones
to execute in which order.


Debug a Device
~~~~~~~~~~~~~~

flow.py
-------

  See flow.py for the beginnings of a generic tool that can be used to:
    * get a list of commands that
    * set or read stateful parameters on the modules
    * use a default set up flows for a default command set
    


python flow.py [options] command
python flow.py help
  
  help
  qss

Why
___

  This makes the device debuggable from the commandline (simplest possible
  thing).  In addition, it allows the code to be tested using examples
  collected from previous runs.

TODO
____

    * load a list of new flows from a module given as an option
      -m --module - load a dict of flows from module.getFlows( )
      Flows should implement a help( ), getOptions, and setOptions( ), and
      they will be added to the list of available flows.

      * tcpatrun:

        * list configurations
        * list open sessions
        * list activated sessions

        * close a session?
          not sure how to do this over TCPATRUN
          may need to eventually trigger another SMS message to turn things
          off
          

    * logging is instrumented, but needs to be tuned a bit more effectively
      which channels should be set to which levels?  how expressive should
      command line log verbosity be?  maybe some stuff should just go to
      syslog?  Perhaps the library should go to syslog unless very verbose
      logging is requested, which case it goes to stdout.  The application's
      log should go to syslog when quiet is requested, INFO to stdout by
      default and debug for verbose?

  hello.py, tcpatrun.py do most of this.
  * manipulate/inspect settings
    * network adapter
      * PDP Context
        * defined, attached, activated, authorized
        * QOS???
      * Socket
      * IP
      * TCPATRUN
        * defined, attached, activated, authorized
      * SMS
        * defined, attached, activated, authorized
      * SIM Toolkit
        * defined, attached, activated, authorized
  * back up settings/configure/restore
  * initialize device
  * generate dummy meter data?
  * python

SMS
~~~
Still need a tool for this.
See flow.py for the beginnings of a tool that takes commandline parameters
for setting and reading settings from the commandline.

Print a received SMS
--------------------
SMS commands
  * + pg206 config CSCA, CSMP, CSDH, CSCB, CSAS, CRES
  * + pg 218 receiving / reading
    * +CNMI, +CMGL, @CMGL, +CMGR, @CMGR
  * list SMS messages
  * select SMS message
  * 

LIST MESSAGES:
  AT+CMGL // list new messages
  AT+CMGL=status // list messages by status
  AT+CMGL=4

  +CMGL: 1,1,"",25
  099188320580200000F0240490257700001150921265122B0BE8329BFD06DDDF723619

  OK


Send SMS and eval SMSATRUN
~~~~~~~~~~~~~~~~~~~~~~~~~~
pg 377 pre = #

SMSATRUN
SMSATRUNCFG
  set SMSATRUN parameters
SMSATWL - whitelist
  * crud

  * print stored flag from SMSATRUN
    * phone book/at storage/python script

Some notes:
http://www.twilio.com/docs/api/rest/sms

https://github.com/pmarti/python-messaging - chosen
http://minimoesfuerzo.org/2010/04/18/python-messaging-sms-encoderdecoder-masses/
  This is the best found so far.  Available as third-party easy_installable
  library.

http://code.google.com/p/python-sms/source/browse/trunk/pducodec.py
  - tried, incomplete?
http://pypi.python.org/pypi/sms#downloads
  - not available?
http://www.monkeysandrobots.com/archives/207
   - close, but missing how to format PDU :$
http://www.dreamfabric.com/sms/deliver_fo.html
http://www.gsm-modem.de/sms-pdu-mode.html

http://www.dreamfabric.com/sms/
http://www.dreamfabric.com/sms/
http://www.koders.com/python/fid40706E080EBF22307940E7CA7ED3C2BE9F73B211.aspx?s=sms#L24
http://pypi.python.org/pypi/smpp.pdu/0.1
https://github.com/mozes/smpp.pdu/tree/master/smpp/pdu
  - redefines constants as dynamically produced classes.  Too much python
    magic machinery.
http://code.google.com/p/python-sms/source/browse/trunk/pdu-decode.py?spec=svn2&r=2
http://twit88.com/home/utility/sms-pdu-encode-decode
http://www.diafaan.com/sms-tutorials/gsm-modem-tutorial/online-sms-status-report-pdu-decoder/
http://pymobile.cvs.sourceforge.net/viewvc/pymobile/pyMobile/Mobile/GSM/
http://www.koders.com/python/fid40706E080EBF22307940E7CA7ED3C2BE9F73B211.aspx?s=sms#L24
http://gsmmanager.cvs.sourceforge.net/viewvc/gsmmanager/gsm_manager/
http://code.google.com/p/smslib/wiki/GSM_Errors


TCPATRUN Hello World
~~~~~~~~~~~~~~~~~~~~
Script to tell the device to connect a port.

  * dump GMI
TCPATRUN
  * auth, firewall, enable
  * multiplexing?

  pg 386

http://docs.python.org/library/asynchat.html
http://docs.python.org/library/collections.html

Serverside Daemon
~~~~~~~~~~~~~~~~~
DONE
____

  * gevent/server.py is proof of concept
  * server.py is a use of the library's server

  * Listen on port
  * PUBLIC IP

TODO
____

    * more flows.  eventually, we'll have a simple tool that can list
      available flows, and then allow a configuration for how to find, specify
      which flows should be used.  It'll re-use the same code as flow.py and
      everything else, so more flows are needed.

    * Record device
    * store in persistent backing store
      pending persistent backing store
      TWILIO/indivo style interface would be *very* nice and would make
      everything fit together nicely.

Dispatcher/Dashboard
~~~~~~~~~~~~~~~~~~~~
  * Need a UI to create transparence
    * ruby (rails)
  * need forward dispatching protocol? ATOMPUB?

Meter
~~~~~
  * connect wire to GE865
  * write/read from port?
  * configure server to use LL protocol

  * persistent models
    * indivo?
  * UI
    * ruby (rails)

Distribution
,,,,,,,,,,,,
http://reinout.vanrees.org/weblog/2009/12/17/managing-dependencies.html

